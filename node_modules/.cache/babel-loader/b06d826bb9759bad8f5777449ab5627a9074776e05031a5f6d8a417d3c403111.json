{"ast":null,"code":"import { MAX_COLS, MAX_ROWS, NUM_OF_BOMBS } from \"../constants\";\nimport { CellValue, CellState } from \"../types\";\nexport const generateCells = () => {\n  let cells = [];\n\n  // Generate all cells\n  for (let row = 0; row < MAX_ROWS; ++row) {\n    cells.push([]);\n    for (let col = 0; col < MAX_COLS; ++col) {\n      cells[row].push({\n        value: CellValue.none,\n        state: CellState.visible\n      });\n    }\n  }\n\n  // Randomly put 10 bombs\n  let bombsPlaced = 0;\n  while (bombsPlaced < NUM_OF_BOMBS) {\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\n    const currentCell = cells[randomRow][randomCol];\n    if (currentCell.value !== CellValue.bomb) {\n      cells = cells.map((row, rowIndex) => row.map((cell, colIndex) => {\n        if (randomRow === rowIndex && randomCol === colIndex) {\n          return {\n            ...cell,\n            value: CellValue.bomb\n          };\n        }\n        return cell;\n      }));\n      bombsPlaced++;\n    }\n  }\n\n  // Calculate the numbers for each cell\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; ++rowIndex) {\n    for (let colIndex = 0; colIndex < MAX_COLS; ++colIndex) {\n      const currentCell = cells[rowIndex][colIndex];\n      if (currentCell.value === CellValue.bomb) {\n        continue;\n      }\n      let numberOfBombs = 0;\n      const topLeftBomb = rowIndex > 0 && colIndex > 0 ? cells[rowIndex - 1][colIndex - 1] : null;\n      const topBomb = rowIndex > 0 ? cells[rowIndex - 1][colIndex] : null;\n      const topRightBomb = rowIndex > 0 && colIndex < MAX_COLS - 1 ? cells[rowIndex - 1][colIndex + 1] : null;\n      const leftBomb = colIndex > 0 ? cells[rowIndex][colIndex - 1] : null;\n      const rightBomb = colIndex < MAX_COLS - 1 ? cells[rowIndex][colIndex + 1] : null;\n      const bottomLeftBomb = rowIndex < MAX_ROWS - 1 && colIndex > 0 ? cells[rowIndex + 1][colIndex - 1] : null;\n      const bottomBomb = rowIndex < MAX_ROWS - 1 ? cells[rowIndex + 1][colIndex] : null;\n      const bottomRightBomb = rowIndex < MAX_ROWS - 1 && colIndex < MAX_COLS - 1 ? cells[rowIndex + 1][colIndex + 1] : null;\n      if ((topLeftBomb === null || topLeftBomb === void 0 ? void 0 : topLeftBomb.value) === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if ((topBomb === null || topBomb === void 0 ? void 0 : topBomb.value) === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if ((topRightBomb === null || topRightBomb === void 0 ? void 0 : topRightBomb.value) === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if ((leftBomb === null || leftBomb === void 0 ? void 0 : leftBomb.value) === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if ((rightBomb === null || rightBomb === void 0 ? void 0 : rightBomb.value) === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if ((bottomLeftBomb === null || bottomLeftBomb === void 0 ? void 0 : bottomLeftBomb.value) === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if ((bottomBomb === null || bottomBomb === void 0 ? void 0 : bottomBomb.value) === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if ((bottomRightBomb === null || bottomRightBomb === void 0 ? void 0 : bottomRightBomb.value) === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (numberOfBombs > 0) {\n        cells[rowIndex][colIndex] = {\n          ...currentCell,\n          value: numberOfBombs\n        };\n      }\n    }\n  }\n  return cells;\n};","map":{"version":3,"names":["MAX_COLS","MAX_ROWS","NUM_OF_BOMBS","CellValue","CellState","generateCells","cells","row","push","col","value","none","state","visible","bombsPlaced","randomRow","Math","floor","random","randomCol","currentCell","bomb","map","rowIndex","cell","colIndex","numberOfBombs","topLeftBomb","topBomb","topRightBomb","leftBomb","rightBomb","bottomLeftBomb","bottomBomb","bottomRightBomb"],"sources":["/Users/lijiheng/CS/GithubProject/minesweeper/src/utils/index.ts"],"sourcesContent":["import { MAX_COLS, MAX_ROWS, NUM_OF_BOMBS } from \"../constants\";\nimport { Cell, CellValue, CellState } from \"../types\";\n\nexport const generateCells = (): Cell[][] => {\n  let cells: Cell[][] = [];\n\n  // Generate all cells\n  for (let row = 0; row < MAX_ROWS; ++row) {\n    cells.push([]);\n    for (let col = 0; col < MAX_COLS; ++col) {\n      cells[row].push({\n        value: CellValue.none,\n        state: CellState.visible,\n      });\n    }\n  }\n\n  // Randomly put 10 bombs\n  let bombsPlaced = 0;\n  while (bombsPlaced < NUM_OF_BOMBS) {\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\n\n    const currentCell = cells[randomRow][randomCol];\n    if (currentCell.value !== CellValue.bomb) {\n      cells = cells.map((row, rowIndex) =>\n        row.map((cell, colIndex) => {\n          if (randomRow === rowIndex && randomCol === colIndex) {\n            return {\n              ...cell,\n              value: CellValue.bomb,\n            };\n          }\n\n          return cell;\n        })\n      );\n      bombsPlaced++;\n    }\n  }\n\n  // Calculate the numbers for each cell\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; ++rowIndex) {\n    for (let colIndex = 0; colIndex < MAX_COLS; ++colIndex) {\n      const currentCell = cells[rowIndex][colIndex];\n      if (currentCell.value === CellValue.bomb) {\n        continue;\n      }\n\n      let numberOfBombs = 0;\n      const topLeftBomb =\n        rowIndex > 0 && colIndex > 0 ? cells[rowIndex - 1][colIndex - 1] : null;\n      const topBomb = rowIndex > 0 ? cells[rowIndex - 1][colIndex] : null;\n      const topRightBomb =\n        rowIndex > 0 && colIndex < MAX_COLS - 1\n          ? cells[rowIndex - 1][colIndex + 1]\n          : null;\n      const leftBomb = colIndex > 0 ? cells[rowIndex][colIndex - 1] : null;\n      const rightBomb =\n        colIndex < MAX_COLS - 1 ? cells[rowIndex][colIndex + 1] : null;\n      const bottomLeftBomb =\n        rowIndex < MAX_ROWS - 1 && colIndex > 0\n          ? cells[rowIndex + 1][colIndex - 1]\n          : null;\n      const bottomBomb =\n        rowIndex < MAX_ROWS - 1 ? cells[rowIndex + 1][colIndex] : null;\n      const bottomRightBomb =\n        rowIndex < MAX_ROWS - 1 && colIndex < MAX_COLS - 1\n          ? cells[rowIndex + 1][colIndex + 1]\n          : null;\n\n      if (topLeftBomb?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (topBomb?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (topRightBomb?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (leftBomb?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (rightBomb?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (bottomLeftBomb?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (bottomBomb?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n      if (bottomRightBomb?.value === CellValue.bomb) {\n        numberOfBombs++;\n      }\n\n      if (numberOfBombs > 0) {\n        cells[rowIndex][colIndex] = {\n          ...currentCell,\n          value: numberOfBombs,\n        };\n      }\n    }\n  }\n\n  return cells;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}