{"ast":null,"code":"var _jsxFileName = \"/Users/lijiheng/CS/GithubProject/minesweeper/src/components/App/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport NumberDisplay from \"../NumberDisplay\";\nimport { generateCells, openMultipleCells } from \"../../utils\";\nimport Button from \"../Button\";\nimport { CellState, CellValue, Face } from \"../../types\";\nimport \"./App.scss\";\nimport { getGameSettings } from \"../../constants\";\nimport ModeDisplay from \"../ModeDisplay/ModeDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const options = [{\n    value: \"Easy\",\n    level: \"Easy\"\n  }, {\n    value: \"Hard\",\n    level: \"Hard\"\n  }, {\n    value: \"Expert\",\n    level: \"Expert\"\n  }];\n  const [selectedValue, setSelectedValue] = useState(options[0].value);\n  const [settings, setSettings] = useState(getGameSettings(selectedValue));\n  const [cells, setCells] = useState(generateCells(selectedValue));\n  const [face, setFace] = useState(Face.smile);\n  const [time, setTime] = useState(0);\n  const [live, setLive] = useState(false);\n  const [bombCounter, setBombCounter] = useState(settings.NUM_OF_BOMBS);\n  const [lose, setLose] = useState(false);\n  const [win, setWin] = useState(false);\n  const currentFace = useRef(face);\n  useEffect(() => {\n    const newSettings = getGameSettings(selectedValue);\n    setSettings(newSettings);\n    setCells(generateCells(selectedValue));\n    setBombCounter(newSettings.NUM_OF_BOMBS);\n    setLive(false);\n    setTime(0);\n    setLose(false);\n    setWin(false);\n    setFace(Face.smile);\n  }, [selectedValue]);\n  useEffect(() => {\n    if (face !== Face.oh) currentFace.current = face;\n  }, [face]);\n  useEffect(() => {\n    const handleMouseDown = () => {\n      setFace(Face.oh);\n    };\n    const handleMouseUp = () => {\n      setFace(currentFace.current);\n    };\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, []);\n  useEffect(() => {\n    if (live && !lose && !win && time < 999) {\n      const timer = setInterval(() => {\n        setTime(time + 1);\n      }, 1000);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [live, lose, win, time]);\n  useEffect(() => {\n    if (lose) {\n      setLive(false);\n      setFace(Face.lost);\n    }\n  }, [lose]);\n  useEffect(() => {\n    if (win) {\n      setLive(false);\n      setFace(Face.won);\n    }\n  }, [win]);\n  const handleCellClick = (rowParam, colParam) => () => {\n    let newCells = cells.slice();\n\n    // Start the game and make sure that the first click is none\n    if (!live) {\n      let firstClickNone = newCells[rowParam][colParam].value === CellValue.none;\n      while (!firstClickNone) {\n        newCells = generateCells(selectedValue);\n        if (newCells[rowParam][colParam].value === CellValue.none) {\n          firstClickNone = true;\n        }\n      }\n      setLive(true);\n    }\n    const currentCell = newCells[rowParam][colParam];\n    if ([CellState.visible, CellState.flagged].includes(currentCell.state)) {\n      return;\n    }\n    if (lose && currentCell.state === CellState.open) {\n      return;\n    }\n    if (currentCell.value === CellValue.bomb) {\n      setLose(true);\n      newCells[rowParam][colParam].red = true;\n      newCells = showAllBombs();\n      setCells(newCells);\n      return;\n    } else if (currentCell.value === CellValue.none) newCells = openMultipleCells(newCells, rowParam, colParam, selectedValue);else newCells[rowParam][colParam].state = CellState.visible;\n    let openCells = false;\n    for (let row = 0; row < settings.MAX_ROWS; ++row) {\n      for (let col = 0; col < settings.MAX_COLS; ++col) {\n        const tmpCell = cells[row][col];\n        if (tmpCell.value !== CellValue.bomb && tmpCell.state === CellState.open) {\n          openCells = true;\n          break;\n        }\n      }\n    }\n    if (!openCells) {\n      newCells = newCells.map(row => row.map(cell => {\n        if (cell.value === CellValue.bomb) {\n          return {\n            ...cell,\n            state: CellState.flagged\n          };\n        }\n        return cell;\n      }));\n      setWin(true);\n    }\n    setCells(newCells);\n  };\n  const handleCellContext = (rowParam, colParam) => e => {\n    e.preventDefault();\n    if (!live) return;\n    const currentCells = cells.slice();\n    const currentCell = cells[rowParam][colParam];\n    if (currentCell.state === CellState.visible) {\n      return;\n    } else if (currentCell.state === CellState.open) {\n      currentCells[rowParam][colParam].state = CellState.flagged;\n      setCells(currentCells);\n      setBombCounter(bombCounter - 1);\n    } else if (currentCell.state === CellState.flagged) {\n      currentCells[rowParam][colParam].state = CellState.open;\n      setCells(currentCells);\n      setBombCounter(bombCounter + 1);\n    }\n  };\n  const handleFaceClick = () => {\n    setLive(false);\n    setTime(0);\n    setCells(generateCells(selectedValue));\n    setBombCounter(settings.NUM_OF_BOMBS);\n    setLose(false);\n    setWin(false);\n    setFace(Face.smile);\n  };\n  const renderCells = () => {\n    return cells.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Button, {\n      state: cell.state,\n      value: cell.value,\n      red: cell.red,\n      onClick: handleCellClick,\n      onContext: handleCellContext,\n      row: rowIndex,\n      col: colIndex\n    }, `${rowIndex}-${colIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)));\n  };\n  const showAllBombs = () => {\n    const currentCells = cells.slice();\n    return currentCells.map(row => row.map(cell => {\n      if (cell.value === CellValue.bomb) {\n        return {\n          ...cell,\n          state: CellState.visible\n        };\n      }\n      return cell;\n    }));\n  };\n  const handleChange = event => {\n    setSelectedValue(event.target.value);\n  };\n  const bodyStyle = {\n    borderWidth: \"4px\",\n    borderStyle: \"solid\",\n    borderRightColor: \"white\",\n    borderBottomColor: \"white\",\n    borderLeftColor: \"#7b7b7b\",\n    borderTopColor: \"#7b7b7b\",\n    marginTop: \"16px\",\n    display: \"grid\",\n    gridTemplateRows: `repeat(${settings.MAX_ROWS}, 1fr)`,\n    gridTemplateColumns: `repeat(${settings.MAX_COLS}, 1fr)`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ModeDisplay, {\n      options: options,\n      selectedValue: selectedValue,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Header\",\n      children: [/*#__PURE__*/_jsxDEV(NumberDisplay, {\n        value: bombCounter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Face\",\n        onClick: handleFaceClick,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"image\",\n          \"aria-label\": \"face\",\n          children: face\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NumberDisplay, {\n        value: time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Body\",\n      style: bodyStyle,\n      children: renderCells()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"R17gBIGsqi1iN1OwpyQ4HnMrpRM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","NumberDisplay","generateCells","openMultipleCells","Button","CellState","CellValue","Face","getGameSettings","ModeDisplay","jsxDEV","_jsxDEV","App","_s","options","value","level","selectedValue","setSelectedValue","settings","setSettings","cells","setCells","face","setFace","smile","time","setTime","live","setLive","bombCounter","setBombCounter","NUM_OF_BOMBS","lose","setLose","win","setWin","currentFace","newSettings","oh","current","handleMouseDown","handleMouseUp","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","lost","won","handleCellClick","rowParam","colParam","newCells","slice","firstClickNone","none","currentCell","visible","flagged","includes","state","open","bomb","red","showAllBombs","openCells","row","MAX_ROWS","col","MAX_COLS","tmpCell","map","cell","handleCellContext","e","preventDefault","currentCells","handleFaceClick","renderCells","rowIndex","colIndex","onClick","onContext","fileName","_jsxFileName","lineNumber","columnNumber","handleChange","event","target","bodyStyle","borderWidth","borderStyle","borderRightColor","borderBottomColor","borderLeftColor","borderTopColor","marginTop","display","gridTemplateRows","gridTemplateColumns","className","children","onChange","role","style","_c","$RefreshReg$"],"sources":["/Users/lijiheng/CS/GithubProject/minesweeper/src/components/App/index.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nimport NumberDisplay from \"../NumberDisplay\";\nimport { generateCells, openMultipleCells } from \"../../utils\";\nimport Button from \"../Button\";\nimport { Cell, CellState, CellValue, Face } from \"../../types\";\n\nimport \"./App.scss\";\nimport { getGameSettings } from \"../../constants\";\nimport ModeDisplay from \"../ModeDisplay/ModeDisplay\";\n\nconst App = () => {\n  const options = [\n    { value: \"Easy\", level: \"Easy\" },\n    { value: \"Hard\", level: \"Hard\" },\n    { value: \"Expert\", level: \"Expert\" },\n  ];\n\n  const [selectedValue, setSelectedValue] = useState(options[0].value);\n  const [settings, setSettings] = useState(getGameSettings(selectedValue));\n  const [cells, setCells] = useState<Cell[][]>(generateCells(selectedValue));\n  const [face, setFace] = useState<Face>(Face.smile);\n  const [time, setTime] = useState<number>(0);\n  const [live, setLive] = useState<boolean>(false);\n  const [bombCounter, setBombCounter] = useState<number>(settings.NUM_OF_BOMBS);\n  const [lose, setLose] = useState<boolean>(false);\n  const [win, setWin] = useState<boolean>(false);\n\n  const currentFace = useRef(face);\n\n  useEffect(() => {\n    const newSettings = getGameSettings(selectedValue);\n    setSettings(newSettings);\n    setCells(generateCells(selectedValue));\n    setBombCounter(newSettings.NUM_OF_BOMBS);\n    setLive(false);\n    setTime(0);\n    setLose(false);\n    setWin(false);\n    setFace(Face.smile);\n  }, [selectedValue]);\n\n  useEffect(() => {\n    if (face !== Face.oh) currentFace.current = face;\n  }, [face]);\n\n  useEffect(() => {\n    const handleMouseDown = (): void => {\n      setFace(Face.oh);\n    };\n\n    const handleMouseUp = (): void => {\n      setFace(currentFace.current);\n    };\n\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (live && !lose && !win && time < 999) {\n      const timer = setInterval(() => {\n        setTime(time + 1);\n      }, 1000);\n\n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [live, lose, win, time]);\n\n  useEffect(() => {\n    if (lose) {\n      setLive(false);\n      setFace(Face.lost);\n    }\n  }, [lose]);\n\n  useEffect(() => {\n    if (win) {\n      setLive(false);\n      setFace(Face.won);\n    }\n  }, [win]);\n\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\n    let newCells = cells.slice();\n\n    // Start the game and make sure that the first click is none\n    if (!live) {\n      let firstClickNone =\n        newCells[rowParam][colParam].value === CellValue.none;\n      while (!firstClickNone) {\n        newCells = generateCells(selectedValue);\n        if (newCells[rowParam][colParam].value === CellValue.none) {\n          firstClickNone = true;\n        }\n      }\n      setLive(true);\n    }\n\n    const currentCell = newCells[rowParam][colParam];\n\n    if ([CellState.visible, CellState.flagged].includes(currentCell.state)) {\n      return;\n    }\n\n    if (lose && currentCell.state === CellState.open) {\n      return;\n    }\n\n    if (currentCell.value === CellValue.bomb) {\n      setLose(true);\n      newCells[rowParam][colParam].red = true;\n      newCells = showAllBombs();\n      setCells(newCells);\n      return;\n    } else if (currentCell.value === CellValue.none)\n      newCells = openMultipleCells(newCells, rowParam, colParam, selectedValue);\n    else newCells[rowParam][colParam].state = CellState.visible;\n\n    let openCells = false;\n    for (let row = 0; row < settings.MAX_ROWS; ++row) {\n      for (let col = 0; col < settings.MAX_COLS; ++col) {\n        const tmpCell = cells[row][col];\n        if (\n          tmpCell.value !== CellValue.bomb &&\n          tmpCell.state === CellState.open\n        ) {\n          openCells = true;\n          break;\n        }\n      }\n    }\n\n    if (!openCells) {\n      newCells = newCells.map((row) =>\n        row.map((cell) => {\n          if (cell.value === CellValue.bomb) {\n            return {\n              ...cell,\n              state: CellState.flagged,\n            };\n          }\n\n          return cell;\n        })\n      );\n      setWin(true);\n    }\n\n    setCells(newCells);\n  };\n\n  const handleCellContext =\n    (rowParam: number, colParam: number) =>\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n      e.preventDefault();\n\n      if (!live) return;\n\n      const currentCells = cells.slice();\n      const currentCell = cells[rowParam][colParam];\n\n      if (currentCell.state === CellState.visible) {\n        return;\n      } else if (currentCell.state === CellState.open) {\n        currentCells[rowParam][colParam].state = CellState.flagged;\n        setCells(currentCells);\n        setBombCounter(bombCounter - 1);\n      } else if (currentCell.state === CellState.flagged) {\n        currentCells[rowParam][colParam].state = CellState.open;\n        setCells(currentCells);\n        setBombCounter(bombCounter + 1);\n      }\n    };\n\n  const handleFaceClick = (): void => {\n    setLive(false);\n    setTime(0);\n    setCells(generateCells(selectedValue));\n    setBombCounter(settings.NUM_OF_BOMBS);\n    setLose(false);\n    setWin(false);\n    setFace(Face.smile);\n  };\n\n  const renderCells = (): React.ReactNode => {\n    return cells.map((row, rowIndex) =>\n      row.map((cell, colIndex) => (\n        <Button\n          key={`${rowIndex}-${colIndex}`}\n          state={cell.state}\n          value={cell.value}\n          red={cell.red}\n          onClick={handleCellClick}\n          onContext={handleCellContext}\n          row={rowIndex}\n          col={colIndex}\n        />\n      ))\n    );\n  };\n\n  const showAllBombs = (): Cell[][] => {\n    const currentCells = cells.slice();\n    return currentCells.map((row) =>\n      row.map((cell) => {\n        if (cell.value === CellValue.bomb) {\n          return {\n            ...cell,\n            state: CellState.visible,\n          };\n        }\n\n        return cell;\n      })\n    );\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedValue(event.target.value);\n  };\n\n  const bodyStyle: React.CSSProperties = {\n    borderWidth: \"4px\",\n    borderStyle: \"solid\",\n    borderRightColor: \"white\",\n    borderBottomColor: \"white\",\n    borderLeftColor: \"#7b7b7b\",\n    borderTopColor: \"#7b7b7b\",\n    marginTop: \"16px\",\n    display: \"grid\",\n    gridTemplateRows: `repeat(${settings.MAX_ROWS}, 1fr)`,\n    gridTemplateColumns: `repeat(${settings.MAX_COLS}, 1fr)`,\n  };\n\n  return (\n    <div className=\"App\">\n      <ModeDisplay\n        options={options}\n        selectedValue={selectedValue}\n        onChange={handleChange}\n      />\n      <div className=\"Header\">\n        <NumberDisplay value={bombCounter} />\n        <div className=\"Face\" onClick={handleFaceClick}>\n          <span role=\"image\" aria-label=\"face\">\n            {face}\n          </span>\n        </div>\n        <NumberDisplay value={time} />\n      </div>\n      <div className=\"Body\" style={bodyStyle}>\n        {renderCells()}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}